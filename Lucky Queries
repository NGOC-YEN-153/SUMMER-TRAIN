#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define trai t[2*u]
#define phai t[2*u+1]
#define giua t[u]
int a[1000005];
struct combo{
    int tang,giam,full0,full1;// tang la phai co dang 01 , giam la phai co dang 10
    int lazy;
};
combo t[4 * 1000005];
void build(int u,  int l , int r){
    if(l == r){
        if(a[l])giua.full1 = 1 , giua.tang = giua.giam = giua.full0  = 0 ;
        else giua.full0 = 1 , giua.tang = giua.giam = giua.full1 = 0 ;
    }
    else {
        int m = (l + r) / 2;
        build(2*u,l,m);
        build(2*u+1,m+1,r);
        giua.full0 = trai.full0 + phai.full0;// update full 0
        giua.full1 = trai.full1 + phai.full1;// update full 1
        giua.tang = max(trai.tang,phai.tang);// update tang
        if(trai.full0 && phai.tang )giua.tang = max(giua.tang , trai.full0 + phai.tang);
        if(trai.full0 && phai.full1)giua.tang = max(giua.tang,trai.full0 + phai.full1);
        if(trai.tang && phai.full1)giua.tang = max(giua.tang , trai.tang + phai.full1);
        giua.giam = max(trai.giam,phai.giam);//update giam
        if(trai.giam && phai.full0)giua.giam=max(giua.giam,trai.giam + phai.full0);
        if(trai.full1 && phai.full0)giua.giam=max(giua.giam,trai.full1 + phai.full0);
        if(trai.full1 && phai.giam)giua.giam = max(giua.giam , trai.full1 + phai.giam);
    }
    giua.lazy = 0;
}
void update(int u , int tl , int tr , int l , int r,int value){
    trai.lazy+=giua.lazy;
    phai.lazy+=giua.lazy;
    if(l == tl && tr == r){
        giua.lazy+=value;
        if(giua.lazy %2 == 1)swap(giua.full0 , giua.full1) ,swap(giua.tang , giua.giam);
        trai.lazy+=value;
        phai.lazy+=value;
    }
    else {
        int m = (tl + tr)/2;
        if(r<=m)  update(2*u,tl,m,l,r , 1) ,update(2*u+1 , m+1,tr,m+1,tr,0) ;
        else if( l > m)  update(2*u , tl,m,tl,m,0) ,update(2*u+1,m+1,tr,l,r , 1 );
        else update(2*u,tl,m,l,m,1) ,update(2*u+1,m+1,tr,m+1,r,1);
        giua.full0 = trai.full0 + phai.full0;//update full 0
        giua.full1 = trai.full1 + phai.full1;// update full 1
        giua.tang = max(trai.tang,phai.tang); //update tang
        if(trai.full0 && phai.tang )giua.tang = max(giua.tang , trai.full0 + phai.tang); 
        if(trai.full0 && phai.full1)giua.tang = max(giua.tang,trai.full0 + phai.full1);
        if(trai.tang && phai.full1)giua.tang = max(giua.tang , trai.tang + phai.full1);
        giua.giam = max(trai.giam,phai.giam); // update giam
        if(trai.giam && phai.full0)giua.giam=max(giua.giam,trai.giam + phai.full0);
        if(trai.full1 && phai.full0)giua.giam=max(giua.giam,trai.full1 + phai.full0);
        if(trai.full1 && phai.giam)giua.giam = max(giua.giam , trai.full1 + phai.giam);
    }
    giua.lazy = 0 ;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    int n , q;
    cin >> n >> q;
    for(int i =1 ; i<= n; i++){
        char c;cin >> c;
        if(c == '4')a[i] = 0;
        else a[i] = 1;
    }
    build(1,1,n);
    while(q--){
        string s;cin >> s;
        if(s == "switch"){
            int l , r;cin >> l>> r;update(1,1,n,l,r,1);
        }
        else cout<<max({t[1].tang , t[1].full0 , t[1].full1})<<endl ;
    }
}
//447747
