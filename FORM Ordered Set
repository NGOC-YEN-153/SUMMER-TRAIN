#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <bits/stdc++.h>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_multiset;
// ngược lower -bound và upper Bound
để đếm <= x thì đếm < x+1
// không có hàm find
int n ;
int a[30005];
ordered_multiset t[4 * 30005];
void build(int u , int l , int r){
    if(l == r){
        t[u].insert(a[l]);
        return;
    }
    int m = (l +r)/2;
    for(int i = l ; i <=r ; i++)t[u].insert(a[i]);
    build(2*u , l , m );
    build(2*u+1 ,m+1,r );
}
int get(int u , int tl , int tr , int l , int r , int k){
    if(l == tl && r == tr){
        return t[u].size() - t[u].order_of_key(k + 1);
    }
    int m = ( tl + tr) / 2;
    if(r <= m)return get(2*u,tl,m,l,r,k);
    else if( l > m )return get(2*u+1,m+1,tr,l,r,k);
    return get(2*u,tl,m,l,m,k) + get(2*u+1 ,m+1,tr , m+1 , r,k);
}
void Set(int u, int tl , int tr , int index , int value){
    if(tl == tr){
        t[u].clear();
        t[u].insert(value);
        a[index] = value;
        return;
    }
    t[u].erase(t[u].upper_bound(a[index]));
    t[u].insert(value);
    int m = (tl + tr) / 2;
    if(index <= m )Set(2*u , tl,m,index,value);
    else Set(2*u + 1 , m+1 , tr , index , value);
    
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> n ;
    for(int i = 1 ; i<= n; i++)cin >> a[i];
    build(1,1,n);
    int q;
    cin >> q;
    while(q--){
        int type;cin >> type;
        if(type==0){
            int i , v;
            cin >> i  >> v;
            Set(1,1,n,i,v);
        }
        else {
            int i , j , k;
            cin >> i >> j >> k;
            cout<<get(1,1,n,i,j,k)<<endl;
        }
    }
}
