#include <bits/stdc++.h>
using namespace std;
#define ll  long long
int n;
int Z[105];
int getbit(int k , int n){
    return (n >>(k-1)) & 1;
}
bool arr[8][8] , ARR[8][8];
ll dp[105][1<<3][1<<3][305];
bool check(int mask , int premask){
    int bit1mask = getbit(1,mask) , bit1premask = getbit(1,premask) , bit3mask = getbit(3,mask) , bit3premask = getbit(3,premask);
    if(bit1mask && bit3premask)return false;
    if(bit3mask && bit1premask)return false;
    return true;
}
bool CHECK(int mask  ,int premask){
    int bit1mask = getbit(1,mask) , bit2mask = getbit(2,mask) , bit3mask = getbit(3,mask);
    int bit1premask = getbit(1,premask) , bit2premask = getbit(2,premask) , bit3premask = getbit(3,premask);
    if(bit1mask  && bit2premask)return false;
    if((bit2mask && bit1premask) || (bit2mask && bit3premask))return false;
    if(bit3mask  && bit2premask)return false;
    return true;
}
ll  back(int i , int mask, int premask ,int cnt){
    if(dp[i][mask][premask][cnt] != -1ll )return dp[i][mask][premask][cnt];
    if(!arr[mask][premask])return dp[i][mask][premask][cnt] = 0ll;
    if(Z[i] && getbit(Z[i] , mask))return dp[i][mask][premask][cnt] = 0ll;
    if(Z[i-1] && getbit(Z[i-1] , premask))return dp[i][mask][premask][cnt] = 0ll;
    if(i == 2){
        if(__builtin_popcount(mask) +  __builtin_popcount(premask) == cnt)return dp[i][mask][premask][cnt] = 1;
        else return dp[i][mask][premask][cnt] = 0 ;
    }
    ll ans = 0;
    for(int prepremask = 0 ; prepremask < 8 ; prepremask ++){
        if(Z[i-2] && getbit(Z[i-2] , prepremask))continue;
        if(!arr[prepremask][premask] || !ARR[prepremask][mask])continue;
        int x = __builtin_popcount(mask);
        if(cnt-x >= 0){
            if(dp[i-1][premask][prepremask][cnt-x] != -1)ans+=dp[i-1][premask][prepremask][cnt-x];
            else ans += back(i-1 , premask,prepremask ,cnt - x);
        }
            
    }
    return dp[i][mask][premask][cnt] = ans;
}
void solve(){
    cin >> n;
    for(int i = 1 ; i<= n ; i++)cin>> Z[i];
    if(n == 1){
        if(Z[1])cout<<2<<" "<<1<<endl;
        else cout<<3 <<" "<<1 <<endl;
        return;
    }
    for(int i = 1 ;  i<= n ; i++){
        for(int mask = 0 ; mask < 8 ; mask ++){
            for(int premask =0  ; premask < 8 ; premask++){
                for(int cnt = 0 ; cnt <= 300 ; cnt++)dp[i][mask][premask][cnt] = -1ll;
            }
        }
    }
    for(int mask = 0 ; mask < 8 ; mask ++){
        for(int premask = 0 ; premask < 8 ; premask ++){
            arr[mask][premask] = ARR[mask][premask] = false;
            if(check(mask,premask))arr[mask][premask] = true;
            if(CHECK(mask,premask))ARR[mask][premask] = true;
        }
    }
    for(int cnt = 300 ; cnt >=0 ; cnt--){
        ll ans = 0;
        for(int mask = 0 ; mask < 8 ; mask ++){
            for(int premask = 0 ; premask < 8 ; premask ++){
                if(!arr[mask][premask])continue;
                if(Z[n] && getbit(Z[n] , mask))continue;
                if(Z[n-1] && getbit(Z[n-1] , premask))continue;
                ans+=back(n,mask,premask,cnt);
            }
        }
        if(ans){
            cout<<cnt <<" " <<ans<<endl;
            break;
        }
    }
}
int main() {
    int t = 1;
//    cin >> t ;
    while(t--)solve();
}
