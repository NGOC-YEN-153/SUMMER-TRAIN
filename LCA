#include <bits/stdc++.h>
using namespace std;
int n ;
vector<int>adj[1005];
int par[1005][12] , height[1005];
bool used[1005];
void dfs(int u,int cao){
    used[u] = true;
    height[u]  = cao;
    for(auto x :adj[u]){
        if(!used[x])dfs(x,cao+1) , par[x][0] = u;
    }
}
void build(){
    dfs(1,0);
    for(int i = 0 ; i<=11 ; i++)par[1][i] = 1;
    for(int j = 1 ; j <= 11 ; j++){
        for(int i = 1 ; i<= n ; i++){
            par[i][j] = par[par[i][j-1]][j-1];
        }
    }
}
int find(int k , int u){
	int base = 0 ;
    while(k){
    	if(k &1 )u = par[u][base];
    	k>>=1 ; base++;
    }
    return u;    
}
int lca(int x , int y){
    if(height[x] > height[y])swap(x,y);
    if(height[x] != height[y])y = find(height[y]-height[x] , y); // convert to same height
    if(x == y)return x;
    for(int i = 11 ; i >= 0  ; i--){ // tham lam moi dung , nguoc lai sai
        if(par[x][i] != par[y][i])x = par[x][i] , y = par[y][i];
    }
    return par[x][0] ; 
}
void solve(int test) {
    cin >> n;
    for(int i = 1 ; i<= n ; i++)adj[i].clear();
    memset(used,false,sizeof(used));
    for(int i = 1; i<= n ; i++){
        int x ; cin >> x;
        while(x--){
            int u ; cin >> u ;
            adj[i].emplace_back(u);
            adj[u].emplace_back(i);
        }
    }
    build();
    cout<<"Case "<< test<<":\n";
    int q ; cin >> q;
    while(q--){
        int x , y ; cin >> x >> y;
        cout<<lca(x,y)<<endl;
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    int t = 1;
    cin >> t;
    for(int i = 1;  i<= t ; i++)solve(i);
}
